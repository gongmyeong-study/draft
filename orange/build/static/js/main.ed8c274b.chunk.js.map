{"version":3,"sources":["components/Header/Header.tsx","components/StudyInfo/StudyInfo.tsx","components/Articles/Articles.tsx","containers/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","className","title","StudyInfo","onClick","window","open","Articles","Main","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAgBeA,MAVf,SAAgBC,GACZ,OACE,4BAAQC,UAAWD,EAAMC,WACvB,4BAAKD,EAAME,OAEX,kD,MCqCOC,MA3Cf,SAAmBH,GACf,OACE,yBAAKC,UAAWD,EAAMC,WACpB,iCACE,wBAAIA,UAAU,eAAd,mCACA,4BACE,4CACA,4CACA,4CACA,4CACA,8CAGJ,iCACE,wBAAIA,UAAU,eAAd,UACA,4BACE,4BACE,uBACEA,UAAU,YACVG,QAAS,kBAAMC,OAAOC,KAAK,yCAF7B,sCASN,iCACE,wBAAIL,UAAU,eAAd,SACA,4BACE,4BACE,uBACEA,UAAU,YACVG,QAAS,kBAAMC,OAAOC,KAAK,uCAF7B,uCCbCC,MAnBf,SAAkBP,GACd,OACE,yBAAKC,UAAWD,EAAMC,WACpB,iCACE,8FACA,yBAAKA,UAAU,YACb,wBAAIA,UAAU,eAAd,mBACA,yKACA,wBAAIA,UAAU,eAAd,mBACA,oLAGJ,iCACE,wECGKO,G,6KAZX,OACE,yBAAKP,UAAU,WACb,kBAAC,EAAD,CAAQA,UAAU,cAAcC,MAAM,oCACtC,8BACE,kBAAC,EAAD,CAAWD,UAAU,cACrB,kBAAC,EAAD,CAAUA,UAAU,yB,GAPXQ,c,MCOJC,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCKcU,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed8c274b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { ArticleProps } from '../Article/Article';\nimport './Header.css';\n\n// each HTML component\nfunction Header(props: ArticleProps) {\n    return (\n      <header className={props.className}>\n        <h1>{props.title}</h1>\n        {/* 소개글 넣기 */}\n        <p>Since. 2020.04.12</p>\n      </header>\n    );\n}\n\nexport default Header;\n","import React from 'react';\n\nimport { ArticleProps } from '../Article/Article';\nimport './StudyInfo.css';\n\nfunction StudyInfo(props: ArticleProps) {\n    return (\n      <div className={props.className}>\n        <section>\n          <h2 className=\"deep-orange\">스터디 멤버</h2>\n          <ul>\n            <li>다빈</li>\n            <li>민재</li>\n            <li>상현</li>\n            <li>은성</li>\n            <li>진섭</li>\n          </ul>\n        </section>\n        <section>\n          <h2 className=\"deep-orange\">GitHub</h2>\n          <ul>\n            <li>\n              <a\n                className=\"VisitLink\"\n                onClick={() => window.open(\"https://github.com/gongmyeong-study\")}\n              >\n                GitHub 방문하기\n              </a>\n            </li>\n          </ul>\n        </section>\n        <section>\n          <h2 className=\"deep-orange\">Slack</h2>\n          <ul>\n            <li>\n              <a\n                className=\"VisitLink\"\n                onClick={() => window.open(\"https://gongmyeongstudy.slack.com\")}\n              >\n                Slack 방문하기\n              </a>\n            </li>       \n          </ul>\n        </section>  \n      </div>\n    );\n}\n\nexport default StudyInfo;\n","import React from 'react';\nimport { ArticleProps } from '../Article/Article';\n\nfunction Articles(props: ArticleProps) {\n    return (\n      <div className={props.className}>\n        <article>\n          <h2>프로그래밍 기본 익히기</h2>\n          <div className=\"exercise\">\n            <h2 className=\"soft-orange\">실습 1.</h2>\n            <p>소문자를 입력 받아 대문자 출력하는 프로그램 만들기</p>\n            <h2 className=\"soft-orange\">실습 2.</h2>\n            <p>골드바흐의 추측을 검증하는 프로그램 만들기(N은 200000 이하)</p>\n          </div>\n        </article>\n        <article>\n          <h2>깃헙 사용하기</h2>\n        </article>\n      </div>\n    );\n}\n\nexport default Articles;\n","import React, { Component } from 'react';\n\nimport { Header, StudyInfo, Articles } from '../../components';\nimport './Main.css';\n\nclass Main extends Component {\n  render() {\n    return(\n      <div className=\"main-ui\">\n        <Header className=\"main-header\" title=\"오렌지 농장\"/>\n        <main>\n          <StudyInfo className=\"left-info\" />\n          <Articles className=\"right-articles\" />  \n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport { Main } from './containers';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}